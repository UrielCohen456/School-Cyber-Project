//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.MainServer {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseEntity", Namespace="http://schemas.datacontract.org/2004/07/DataLayer")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client.MainServer.Friend))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client.MainServer.Message))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client.MainServer.User))]
    public partial class BaseEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Friend", Namespace="http://schemas.datacontract.org/2004/07/DataLayer")]
    [System.SerializableAttribute()]
    public partial class Friend : Client.MainServer.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateAddedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.MainServer.FriendStatus StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserId1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserId2Field;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateAdded {
            get {
                return this.DateAddedField;
            }
            set {
                if ((this.DateAddedField.Equals(value) != true)) {
                    this.DateAddedField = value;
                    this.RaisePropertyChanged("DateAdded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.MainServer.FriendStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId1 {
            get {
                return this.UserId1Field;
            }
            set {
                if ((this.UserId1Field.Equals(value) != true)) {
                    this.UserId1Field = value;
                    this.RaisePropertyChanged("UserId1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId2 {
            get {
                return this.UserId2Field;
            }
            set {
                if ((this.UserId2Field.Equals(value) != true)) {
                    this.UserId2Field = value;
                    this.RaisePropertyChanged("UserId2");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/DataLayer")]
    [System.SerializableAttribute()]
    public partial class Message : Client.MainServer.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FromIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ToIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FromId {
            get {
                return this.FromIdField;
            }
            set {
                if ((this.FromIdField.Equals(value) != true)) {
                    this.FromIdField = value;
                    this.RaisePropertyChanged("FromId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ToId {
            get {
                return this.ToIdField;
            }
            set {
                if ((this.ToIdField.Equals(value) != true)) {
                    this.ToIdField = value;
                    this.RaisePropertyChanged("ToId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/DataLayer")]
    [System.SerializableAttribute()]
    public partial class User : Client.MainServer.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FriendStatus", Namespace="http://schemas.datacontract.org/2004/07/DataLayer")]
    public enum FriendStatus : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Waiting = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Accepted = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Denied = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Removed = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationFault", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
    [System.SerializableAttribute()]
    public partial class OperationFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Operation {
            get {
                return this.OperationField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationField, value) != true)) {
                    this.OperationField = value;
                    this.RaisePropertyChanged("Operation");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserProfileInfo", Namespace="http://schemas.datacontract.org/2004/07/DataLayer")]
    [System.SerializableAttribute()]
    public partial class UserProfileInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GamesLostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GamesPlayedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GamesWonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HighestScoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalScoreField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GamesLost {
            get {
                return this.GamesLostField;
            }
            set {
                if ((this.GamesLostField.Equals(value) != true)) {
                    this.GamesLostField = value;
                    this.RaisePropertyChanged("GamesLost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GamesPlayed {
            get {
                return this.GamesPlayedField;
            }
            set {
                if ((this.GamesPlayedField.Equals(value) != true)) {
                    this.GamesPlayedField = value;
                    this.RaisePropertyChanged("GamesPlayed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GamesWon {
            get {
                return this.GamesWonField;
            }
            set {
                if ((this.GamesWonField.Equals(value) != true)) {
                    this.GamesWonField = value;
                    this.RaisePropertyChanged("GamesWon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HighestScore {
            get {
                return this.HighestScoreField;
            }
            set {
                if ((this.HighestScoreField.Equals(value) != true)) {
                    this.HighestScoreField = value;
                    this.RaisePropertyChanged("HighestScore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalScore {
            get {
                return this.TotalScoreField;
            }
            set {
                if ((this.TotalScoreField.Equals(value) != true)) {
                    this.TotalScoreField = value;
                    this.RaisePropertyChanged("TotalScore");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Room", Namespace="http://schemas.datacontract.org/2004/07/DataLayer")]
    [System.SerializableAttribute()]
    public partial class Room : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.MainServer.User AdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.MainServer.RoomData DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, Client.MainServer.User> UsersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.MainServer.User Admin {
            get {
                return this.AdminField;
            }
            set {
                if ((object.ReferenceEquals(this.AdminField, value) != true)) {
                    this.AdminField = value;
                    this.RaisePropertyChanged("Admin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.MainServer.RoomData Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, Client.MainServer.User> Users {
            get {
                return this.UsersField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersField, value) != true)) {
                    this.UsersField = value;
                    this.RaisePropertyChanged("Users");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoomData", Namespace="http://schemas.datacontract.org/2004/07/DataLayer")]
    [System.SerializableAttribute()]
    public partial class RoomData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxPlayersCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasPassword {
            get {
                return this.HasPasswordField;
            }
            set {
                if ((this.HasPasswordField.Equals(value) != true)) {
                    this.HasPasswordField = value;
                    this.RaisePropertyChanged("HasPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxPlayersCount {
            get {
                return this.MaxPlayersCountField;
            }
            set {
                if ((this.MaxPlayersCountField.Equals(value) != true)) {
                    this.MaxPlayersCountField = value;
                    this.RaisePropertyChanged("MaxPlayersCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoomParameters", Namespace="http://schemas.datacontract.org/2004/07/DataLayer")]
    [System.SerializableAttribute()]
    public partial struct RoomParameters : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxPlayersCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoomNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxPlayersCount {
            get {
                return this.MaxPlayersCountField;
            }
            set {
                if ((this.MaxPlayersCountField.Equals(value) != true)) {
                    this.MaxPlayersCountField = value;
                    this.RaisePropertyChanged("MaxPlayersCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoomName {
            get {
                return this.RoomNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RoomNameField, value) != true)) {
                    this.RoomNameField = value;
                    this.RaisePropertyChanged("RoomName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameParameters", Namespace="http://schemas.datacontract.org/2004/07/DataLayer")]
    [System.SerializableAttribute()]
    public partial class GameParameters : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberOfRoundsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberOfRounds {
            get {
                return this.NumberOfRoundsField;
            }
            set {
                if ((this.NumberOfRoundsField.Equals(value) != true)) {
                    this.NumberOfRoundsField = value;
                    this.RaisePropertyChanged("NumberOfRounds");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameInformation", Namespace="http://schemas.datacontract.org/2004/07/DataLayer")]
    [System.SerializableAttribute()]
    public partial class GameInformation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CurrentRoundNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CurrentWordLengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsGameFinishedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberOfRoundsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.MainServer.User PainterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RemainingTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<Client.MainServer.RevealedLetter> RevealedLettersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool TurnResetField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurrentRoundNumber {
            get {
                return this.CurrentRoundNumberField;
            }
            set {
                if ((this.CurrentRoundNumberField.Equals(value) != true)) {
                    this.CurrentRoundNumberField = value;
                    this.RaisePropertyChanged("CurrentRoundNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurrentWordLength {
            get {
                return this.CurrentWordLengthField;
            }
            set {
                if ((this.CurrentWordLengthField.Equals(value) != true)) {
                    this.CurrentWordLengthField = value;
                    this.RaisePropertyChanged("CurrentWordLength");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsGameFinished {
            get {
                return this.IsGameFinishedField;
            }
            set {
                if ((this.IsGameFinishedField.Equals(value) != true)) {
                    this.IsGameFinishedField = value;
                    this.RaisePropertyChanged("IsGameFinished");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberOfRounds {
            get {
                return this.NumberOfRoundsField;
            }
            set {
                if ((this.NumberOfRoundsField.Equals(value) != true)) {
                    this.NumberOfRoundsField = value;
                    this.RaisePropertyChanged("NumberOfRounds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.MainServer.User Painter {
            get {
                return this.PainterField;
            }
            set {
                if ((object.ReferenceEquals(this.PainterField, value) != true)) {
                    this.PainterField = value;
                    this.RaisePropertyChanged("Painter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RemainingTime {
            get {
                return this.RemainingTimeField;
            }
            set {
                if ((this.RemainingTimeField.Equals(value) != true)) {
                    this.RemainingTimeField = value;
                    this.RaisePropertyChanged("RemainingTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Client.MainServer.RevealedLetter> RevealedLetters {
            get {
                return this.RevealedLettersField;
            }
            set {
                if ((object.ReferenceEquals(this.RevealedLettersField, value) != true)) {
                    this.RevealedLettersField = value;
                    this.RaisePropertyChanged("RevealedLetters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TurnReset {
            get {
                return this.TurnResetField;
            }
            set {
                if ((this.TurnResetField.Equals(value) != true)) {
                    this.TurnResetField = value;
                    this.RaisePropertyChanged("TurnReset");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RevealedLetter", Namespace="http://schemas.datacontract.org/2004/07/DataLayer")]
    [System.SerializableAttribute()]
    public partial struct RevealedLetter : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private char LetterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LetterIndexField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char Letter {
            get {
                return this.LetterField;
            }
            set {
                if ((this.LetterField.Equals(value) != true)) {
                    this.LetterField = value;
                    this.RaisePropertyChanged("Letter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LetterIndex {
            get {
                return this.LetterIndexField;
            }
            set {
                if ((this.LetterIndexField.Equals(value) != true)) {
                    this.LetterIndexField = value;
                    this.RaisePropertyChanged("LetterIndex");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnswerSubmitResult", Namespace="http://schemas.datacontract.org/2004/07/DataLayer")]
    public enum AnswerSubmitResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wrong = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Right = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TimesUp = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AnsweredAlready = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GameFinished = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerGameData", Namespace="http://schemas.datacontract.org/2004/07/DataLayer")]
    [System.SerializableAttribute()]
    public partial class PlayerGameData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int scoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int userIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int score {
            get {
                return this.scoreField;
            }
            set {
                if ((this.scoreField.Equals(value) != true)) {
                    this.scoreField = value;
                    this.RaisePropertyChanged("score");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int userId {
            get {
                return this.userIdField;
            }
            set {
                if ((this.userIdField.Equals(value) != true)) {
                    this.userIdField = value;
                    this.RaisePropertyChanged("userId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoomUpdate", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
    public enum RoomUpdate : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Created = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Closed = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StateChanged = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Started = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UserLeft = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UserJoined = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainServer.IClientService", CallbackContract=typeof(Client.MainServer.IClientServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IClientService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/Login", ReplyAction="http://tempuri.org/IClientService/LoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MainServer.OperationFault), Action="http://tempuri.org/IClientService/LoginOperationFaultFault", Name="OperationFault", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
        Client.MainServer.User Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/Login", ReplyAction="http://tempuri.org/IClientService/LoginResponse")]
        System.Threading.Tasks.Task<Client.MainServer.User> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/Signup", ReplyAction="http://tempuri.org/IClientService/SignupResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MainServer.OperationFault), Action="http://tempuri.org/IClientService/SignupOperationFaultFault", Name="OperationFault", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
        Client.MainServer.User Signup(string name, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/Signup", ReplyAction="http://tempuri.org/IClientService/SignupResponse")]
        System.Threading.Tasks.Task<Client.MainServer.User> SignupAsync(string name, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/Logout", ReplyAction="http://tempuri.org/IClientService/LogoutResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MainServer.OperationFault), Action="http://tempuri.org/IClientService/LogoutOperationFaultFault", Name="OperationFault", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
        void Logout();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/Logout", ReplyAction="http://tempuri.org/IClientService/LogoutResponse")]
        System.Threading.Tasks.Task LogoutAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetProfileInfo", ReplyAction="http://tempuri.org/IClientService/GetProfileInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MainServer.OperationFault), Action="http://tempuri.org/IClientService/GetProfileInfoOperationFaultFault", Name="OperationFault", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
        Client.MainServer.UserProfileInfo GetProfileInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetProfileInfo", ReplyAction="http://tempuri.org/IClientService/GetProfileInfoResponse")]
        System.Threading.Tasks.Task<Client.MainServer.UserProfileInfo> GetProfileInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetUser", ReplyAction="http://tempuri.org/IClientService/GetUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MainServer.OperationFault), Action="http://tempuri.org/IClientService/GetUserOperationFaultFault", Name="OperationFault", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
        Client.MainServer.User GetUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetUser", ReplyAction="http://tempuri.org/IClientService/GetUserResponse")]
        System.Threading.Tasks.Task<Client.MainServer.User> GetUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetUsers", ReplyAction="http://tempuri.org/IClientService/GetUsersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MainServer.OperationFault), Action="http://tempuri.org/IClientService/GetUsersOperationFaultFault", Name="OperationFault", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
        System.Collections.Generic.List<Client.MainServer.User> GetUsers(string searchQuery, int userCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetUsers", ReplyAction="http://tempuri.org/IClientService/GetUsersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Client.MainServer.User>> GetUsersAsync(string searchQuery, int userCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetFriends", ReplyAction="http://tempuri.org/IClientService/GetFriendsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MainServer.OperationFault), Action="http://tempuri.org/IClientService/GetFriendsOperationFaultFault", Name="OperationFault", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
        System.Collections.Generic.List<Client.MainServer.Friend> GetFriends(Client.MainServer.FriendStatus status, int friendCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetFriends", ReplyAction="http://tempuri.org/IClientService/GetFriendsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Client.MainServer.Friend>> GetFriendsAsync(Client.MainServer.FriendStatus status, int friendCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetFriendIfExists", ReplyAction="http://tempuri.org/IClientService/GetFriendIfExistsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MainServer.OperationFault), Action="http://tempuri.org/IClientService/GetFriendIfExistsOperationFaultFault", Name="OperationFault", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
        Client.MainServer.Friend GetFriendIfExists(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetFriendIfExists", ReplyAction="http://tempuri.org/IClientService/GetFriendIfExistsResponse")]
        System.Threading.Tasks.Task<Client.MainServer.Friend> GetFriendIfExistsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddFriend", ReplyAction="http://tempuri.org/IClientService/AddFriendResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MainServer.OperationFault), Action="http://tempuri.org/IClientService/AddFriendOperationFaultFault", Name="OperationFault", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
        Client.MainServer.Friend AddFriend(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddFriend", ReplyAction="http://tempuri.org/IClientService/AddFriendResponse")]
        System.Threading.Tasks.Task<Client.MainServer.Friend> AddFriendAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/ChangeFriendStatus", ReplyAction="http://tempuri.org/IClientService/ChangeFriendStatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MainServer.OperationFault), Action="http://tempuri.org/IClientService/ChangeFriendStatusOperationFaultFault", Name="OperationFault", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
        Client.MainServer.Friend ChangeFriendStatus(int userId, Client.MainServer.FriendStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/ChangeFriendStatus", ReplyAction="http://tempuri.org/IClientService/ChangeFriendStatusResponse")]
        System.Threading.Tasks.Task<Client.MainServer.Friend> ChangeFriendStatusAsync(int userId, Client.MainServer.FriendStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/SendMessage", ReplyAction="http://tempuri.org/IClientService/SendMessageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MainServer.OperationFault), Action="http://tempuri.org/IClientService/SendMessageOperationFaultFault", Name="OperationFault", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
        Client.MainServer.Message SendMessage(int userId, string messageText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/SendMessage", ReplyAction="http://tempuri.org/IClientService/SendMessageResponse")]
        System.Threading.Tasks.Task<Client.MainServer.Message> SendMessageAsync(int userId, string messageText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetConversationWithUser", ReplyAction="http://tempuri.org/IClientService/GetConversationWithUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MainServer.OperationFault), Action="http://tempuri.org/IClientService/GetConversationWithUserOperationFaultFault", Name="OperationFault", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
        System.Collections.Generic.List<Client.MainServer.Message> GetConversationWithUser(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetConversationWithUser", ReplyAction="http://tempuri.org/IClientService/GetConversationWithUserResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Client.MainServer.Message>> GetConversationWithUserAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetAllRooms", ReplyAction="http://tempuri.org/IClientService/GetAllRoomsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MainServer.OperationFault), Action="http://tempuri.org/IClientService/GetAllRoomsOperationFaultFault", Name="OperationFault", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
        System.Collections.Generic.List<Client.MainServer.Room> GetAllRooms();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetAllRooms", ReplyAction="http://tempuri.org/IClientService/GetAllRoomsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Client.MainServer.Room>> GetAllRoomsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/CreateRoom", ReplyAction="http://tempuri.org/IClientService/CreateRoomResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MainServer.OperationFault), Action="http://tempuri.org/IClientService/CreateRoomOperationFaultFault", Name="OperationFault", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
        Client.MainServer.Room CreateRoom(Client.MainServer.RoomParameters roomParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/CreateRoom", ReplyAction="http://tempuri.org/IClientService/CreateRoomResponse")]
        System.Threading.Tasks.Task<Client.MainServer.Room> CreateRoomAsync(Client.MainServer.RoomParameters roomParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/JoinRoom", ReplyAction="http://tempuri.org/IClientService/JoinRoomResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MainServer.OperationFault), Action="http://tempuri.org/IClientService/JoinRoomOperationFaultFault", Name="OperationFault", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
        Client.MainServer.Room JoinRoom(int roomId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/JoinRoom", ReplyAction="http://tempuri.org/IClientService/JoinRoomResponse")]
        System.Threading.Tasks.Task<Client.MainServer.Room> JoinRoomAsync(int roomId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/LeaveRoom", ReplyAction="http://tempuri.org/IClientService/LeaveRoomResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MainServer.OperationFault), Action="http://tempuri.org/IClientService/LeaveRoomOperationFaultFault", Name="OperationFault", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
        void LeaveRoom(int roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/LeaveRoom", ReplyAction="http://tempuri.org/IClientService/LeaveRoomResponse")]
        System.Threading.Tasks.Task LeaveRoomAsync(int roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/StartGame", ReplyAction="http://tempuri.org/IClientService/StartGameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MainServer.OperationFault), Action="http://tempuri.org/IClientService/StartGameOperationFaultFault", Name="OperationFault", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
        int StartGame(int roomId, Client.MainServer.GameParameters parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/StartGame", ReplyAction="http://tempuri.org/IClientService/StartGameResponse")]
        System.Threading.Tasks.Task<int> StartGameAsync(int roomId, Client.MainServer.GameParameters parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/LeaveGame", ReplyAction="http://tempuri.org/IClientService/LeaveGameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MainServer.OperationFault), Action="http://tempuri.org/IClientService/LeaveGameOperationFaultFault", Name="OperationFault", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
        void LeaveGame(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/LeaveGame", ReplyAction="http://tempuri.org/IClientService/LeaveGameResponse")]
        System.Threading.Tasks.Task LeaveGameAsync(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetAllPlayers", ReplyAction="http://tempuri.org/IClientService/GetAllPlayersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MainServer.OperationFault), Action="http://tempuri.org/IClientService/GetAllPlayersOperationFaultFault", Name="OperationFault", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
        System.Collections.Generic.List<Client.MainServer.User> GetAllPlayers(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetAllPlayers", ReplyAction="http://tempuri.org/IClientService/GetAllPlayersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Client.MainServer.User>> GetAllPlayersAsync(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetGameInformation", ReplyAction="http://tempuri.org/IClientService/GetGameInformationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MainServer.OperationFault), Action="http://tempuri.org/IClientService/GetGameInformationOperationFaultFault", Name="OperationFault", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
        Client.MainServer.GameInformation GetGameInformation(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetGameInformation", ReplyAction="http://tempuri.org/IClientService/GetGameInformationResponse")]
        System.Threading.Tasks.Task<Client.MainServer.GameInformation> GetGameInformationAsync(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/SubmitGuess", ReplyAction="http://tempuri.org/IClientService/SubmitGuessResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MainServer.OperationFault), Action="http://tempuri.org/IClientService/SubmitGuessOperationFaultFault", Name="OperationFault", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
        Client.MainServer.AnswerSubmitResult SubmitGuess(int gameId, string guess);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/SubmitGuess", ReplyAction="http://tempuri.org/IClientService/SubmitGuessResponse")]
        System.Threading.Tasks.Task<Client.MainServer.AnswerSubmitResult> SubmitGuessAsync(int gameId, string guess);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/SubmitDraw", ReplyAction="http://tempuri.org/IClientService/SubmitDrawResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MainServer.OperationFault), Action="http://tempuri.org/IClientService/SubmitDrawOperationFaultFault", Name="OperationFault", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
        void SubmitDraw(int gameId, System.IO.MemoryStream strokes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/SubmitDraw", ReplyAction="http://tempuri.org/IClientService/SubmitDrawResponse")]
        System.Threading.Tasks.Task SubmitDrawAsync(int gameId, System.IO.MemoryStream strokes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetScores", ReplyAction="http://tempuri.org/IClientService/GetScoresResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MainServer.OperationFault), Action="http://tempuri.org/IClientService/GetScoresOperationFaultFault", Name="OperationFault", Namespace="http://schemas.datacontract.org/2004/07/MainServer")]
        System.Collections.Generic.List<Client.MainServer.PlayerGameData> GetScores(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetScores", ReplyAction="http://tempuri.org/IClientService/GetScoresResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Client.MainServer.PlayerGameData>> GetScoresAsync(int gameId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientService/NewMessageReceived")]
        void NewMessageReceived(Client.MainServer.User user, Client.MainServer.Message message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientService/FriendStatusChanged")]
        void FriendStatusChanged(Client.MainServer.Friend friend, Client.MainServer.User friendUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientService/RoomUpdated")]
        void RoomUpdated(Client.MainServer.Room updatedRoom, Client.MainServer.RoomUpdate update);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientService/GameStarted")]
        void GameStarted(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientService/PlayerLeftTheGame")]
        void PlayerLeftTheGame(Client.MainServer.User player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientService/BoardChanged")]
        void BoardChanged(System.IO.MemoryStream newBoard);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientService/PlayerSubmitedGuess")]
        void PlayerSubmitedGuess(Client.MainServer.User player, string guess);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientService/PlayerAnsweredCorrectly")]
        void PlayerAnsweredCorrectly(Client.MainServer.User player, Client.MainServer.PlayerGameData playerData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientServiceChannel : Client.MainServer.IClientService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientServiceClient : System.ServiceModel.DuplexClientBase<Client.MainServer.IClientService>, Client.MainServer.IClientService {
        
        public ClientServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ClientServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ClientServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public Client.MainServer.User Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<Client.MainServer.User> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public Client.MainServer.User Signup(string name, string username, string password) {
            return base.Channel.Signup(name, username, password);
        }
        
        public System.Threading.Tasks.Task<Client.MainServer.User> SignupAsync(string name, string username, string password) {
            return base.Channel.SignupAsync(name, username, password);
        }
        
        public void Logout() {
            base.Channel.Logout();
        }
        
        public System.Threading.Tasks.Task LogoutAsync() {
            return base.Channel.LogoutAsync();
        }
        
        public Client.MainServer.UserProfileInfo GetProfileInfo() {
            return base.Channel.GetProfileInfo();
        }
        
        public System.Threading.Tasks.Task<Client.MainServer.UserProfileInfo> GetProfileInfoAsync() {
            return base.Channel.GetProfileInfoAsync();
        }
        
        public Client.MainServer.User GetUser(int id) {
            return base.Channel.GetUser(id);
        }
        
        public System.Threading.Tasks.Task<Client.MainServer.User> GetUserAsync(int id) {
            return base.Channel.GetUserAsync(id);
        }
        
        public System.Collections.Generic.List<Client.MainServer.User> GetUsers(string searchQuery, int userCount) {
            return base.Channel.GetUsers(searchQuery, userCount);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Client.MainServer.User>> GetUsersAsync(string searchQuery, int userCount) {
            return base.Channel.GetUsersAsync(searchQuery, userCount);
        }
        
        public System.Collections.Generic.List<Client.MainServer.Friend> GetFriends(Client.MainServer.FriendStatus status, int friendCount) {
            return base.Channel.GetFriends(status, friendCount);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Client.MainServer.Friend>> GetFriendsAsync(Client.MainServer.FriendStatus status, int friendCount) {
            return base.Channel.GetFriendsAsync(status, friendCount);
        }
        
        public Client.MainServer.Friend GetFriendIfExists(int userId) {
            return base.Channel.GetFriendIfExists(userId);
        }
        
        public System.Threading.Tasks.Task<Client.MainServer.Friend> GetFriendIfExistsAsync(int userId) {
            return base.Channel.GetFriendIfExistsAsync(userId);
        }
        
        public Client.MainServer.Friend AddFriend(int userId) {
            return base.Channel.AddFriend(userId);
        }
        
        public System.Threading.Tasks.Task<Client.MainServer.Friend> AddFriendAsync(int userId) {
            return base.Channel.AddFriendAsync(userId);
        }
        
        public Client.MainServer.Friend ChangeFriendStatus(int userId, Client.MainServer.FriendStatus status) {
            return base.Channel.ChangeFriendStatus(userId, status);
        }
        
        public System.Threading.Tasks.Task<Client.MainServer.Friend> ChangeFriendStatusAsync(int userId, Client.MainServer.FriendStatus status) {
            return base.Channel.ChangeFriendStatusAsync(userId, status);
        }
        
        public Client.MainServer.Message SendMessage(int userId, string messageText) {
            return base.Channel.SendMessage(userId, messageText);
        }
        
        public System.Threading.Tasks.Task<Client.MainServer.Message> SendMessageAsync(int userId, string messageText) {
            return base.Channel.SendMessageAsync(userId, messageText);
        }
        
        public System.Collections.Generic.List<Client.MainServer.Message> GetConversationWithUser(int userId) {
            return base.Channel.GetConversationWithUser(userId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Client.MainServer.Message>> GetConversationWithUserAsync(int userId) {
            return base.Channel.GetConversationWithUserAsync(userId);
        }
        
        public System.Collections.Generic.List<Client.MainServer.Room> GetAllRooms() {
            return base.Channel.GetAllRooms();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Client.MainServer.Room>> GetAllRoomsAsync() {
            return base.Channel.GetAllRoomsAsync();
        }
        
        public Client.MainServer.Room CreateRoom(Client.MainServer.RoomParameters roomParams) {
            return base.Channel.CreateRoom(roomParams);
        }
        
        public System.Threading.Tasks.Task<Client.MainServer.Room> CreateRoomAsync(Client.MainServer.RoomParameters roomParams) {
            return base.Channel.CreateRoomAsync(roomParams);
        }
        
        public Client.MainServer.Room JoinRoom(int roomId, string password) {
            return base.Channel.JoinRoom(roomId, password);
        }
        
        public System.Threading.Tasks.Task<Client.MainServer.Room> JoinRoomAsync(int roomId, string password) {
            return base.Channel.JoinRoomAsync(roomId, password);
        }
        
        public void LeaveRoom(int roomId) {
            base.Channel.LeaveRoom(roomId);
        }
        
        public System.Threading.Tasks.Task LeaveRoomAsync(int roomId) {
            return base.Channel.LeaveRoomAsync(roomId);
        }
        
        public int StartGame(int roomId, Client.MainServer.GameParameters parameters) {
            return base.Channel.StartGame(roomId, parameters);
        }
        
        public System.Threading.Tasks.Task<int> StartGameAsync(int roomId, Client.MainServer.GameParameters parameters) {
            return base.Channel.StartGameAsync(roomId, parameters);
        }
        
        public void LeaveGame(int gameId) {
            base.Channel.LeaveGame(gameId);
        }
        
        public System.Threading.Tasks.Task LeaveGameAsync(int gameId) {
            return base.Channel.LeaveGameAsync(gameId);
        }
        
        public System.Collections.Generic.List<Client.MainServer.User> GetAllPlayers(int gameId) {
            return base.Channel.GetAllPlayers(gameId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Client.MainServer.User>> GetAllPlayersAsync(int gameId) {
            return base.Channel.GetAllPlayersAsync(gameId);
        }
        
        public Client.MainServer.GameInformation GetGameInformation(int gameId) {
            return base.Channel.GetGameInformation(gameId);
        }
        
        public System.Threading.Tasks.Task<Client.MainServer.GameInformation> GetGameInformationAsync(int gameId) {
            return base.Channel.GetGameInformationAsync(gameId);
        }
        
        public Client.MainServer.AnswerSubmitResult SubmitGuess(int gameId, string guess) {
            return base.Channel.SubmitGuess(gameId, guess);
        }
        
        public System.Threading.Tasks.Task<Client.MainServer.AnswerSubmitResult> SubmitGuessAsync(int gameId, string guess) {
            return base.Channel.SubmitGuessAsync(gameId, guess);
        }
        
        public void SubmitDraw(int gameId, System.IO.MemoryStream strokes) {
            base.Channel.SubmitDraw(gameId, strokes);
        }
        
        public System.Threading.Tasks.Task SubmitDrawAsync(int gameId, System.IO.MemoryStream strokes) {
            return base.Channel.SubmitDrawAsync(gameId, strokes);
        }
        
        public System.Collections.Generic.List<Client.MainServer.PlayerGameData> GetScores(int gameId) {
            return base.Channel.GetScores(gameId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Client.MainServer.PlayerGameData>> GetScoresAsync(int gameId) {
            return base.Channel.GetScoresAsync(gameId);
        }
    }
}
